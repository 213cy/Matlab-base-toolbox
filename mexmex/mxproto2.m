function [methodinfo,structs,enuminfo,ThunkLibName]=mxproto2
%MXPROTO2 Create structures to define interfaces found in 'shrlibsample'.

%This function was generated by loadlibrary.m parser version  on Sun Apr  4 00:26:03 2021
%perl options:'shrlibsample.i -outfile=mxproto2.m -thunkfile=shrlibsample_thunk_pcwin64.c -header=shrlibsample.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'shrlibsample_thunk_pcwin64');
%  void multDoubleArray ( double *, int ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='multDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  double addMixedTypes ( short , int , double ); 
fcns.thunkname{fcnNum}='doubleint16int32doubleThunk';fcns.name{fcnNum}='addMixedTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int16', 'int32', 'double'};fcnNum=fcnNum+1;
%  double addDoubleRef ( double , double *, double ); 
fcns.thunkname{fcnNum}='doubledoublevoidPtrdoubleThunk';fcns.name{fcnNum}='addDoubleRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'double'};fcnNum=fcnNum+1;
%  const char * stringToUpper ( char *); 
fcns.thunkname{fcnNum}='cstringcstringThunk';fcns.name{fcnNum}='stringToUpper'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  char * readEnum ( TEnum1 ); 
fcns.thunkname{fcnNum}='cstringTEnum1Thunk';fcns.name{fcnNum}='readEnum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'Enum1'};fcnNum=fcnNum+1;
%  double addStructFields ( struct c_struct ); 
fcns.thunkname{fcnNum}='doublestructc_structThunk';fcns.name{fcnNum}='addStructFields'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'c_struct'};fcnNum=fcnNum+1;
%  double * multDoubleRef ( double * x ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='multDoubleRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  double addStructByRef ( struct c_struct *); 
fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='addStructByRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'c_structPtr'};fcnNum=fcnNum+1;
%  void allocateStruct ( struct c_struct **); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='allocateStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'c_structPtrPtr'};fcnNum=fcnNum+1;
%  void deallocateStruct ( void * ptr ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='deallocateStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  void multiplyShort ( short *, int ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='multiplyShort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int16Ptr', 'int32'};fcnNum=fcnNum+1;
%  void print2darray ( double my2d [][ 3 ], int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='print2darray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  const char ** getListOfStrings ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='getListOfStrings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  extern double exportedDoubleValue ; 
fcns.name{fcnNum}='exportedDoubleValue'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void printExportedDoubleValue ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='printExportedDoubleValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
structs.c_struct.members=struct('p1', 'double', 'p2', 'int16', 'p3', 'long');
enuminfo.Enum1=struct('en1',1,'en2',2,'en4',4);
methodinfo=fcns;